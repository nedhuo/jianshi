package com.hngg.jianshi.data.database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.hngg.jianshi.data.database.bean.VideoResolutionInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_RESOLUTION".
*/
public class VideoResolutionDao extends AbstractDao<VideoResolutionInfo, Long> {

    public static final String TABLENAME = "VIDEO_RESOLUTION";

    /**
     * Properties of entity VideoResolutionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoInfoId = new Property(1, Long.class, "videoInfoId", false, "VIDEO_INFO_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Size = new Property(5, Long.class, "size", false, "SIZE");
    }

    private Query<VideoResolutionInfo> videoInfo_PlayInfosQuery;

    public VideoResolutionDao(DaoConfig config) {
        super(config);
    }
    
    public VideoResolutionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_RESOLUTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VIDEO_INFO_ID\" INTEGER," + // 1: videoInfoId
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" TEXT," + // 3: type
                "\"URL\" TEXT NOT NULL ," + // 4: url
                "\"SIZE\" INTEGER);"); // 5: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_RESOLUTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoResolutionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long videoInfoId = entity.getVideoInfoId();
        if (videoInfoId != null) {
            stmt.bindLong(2, videoInfoId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindString(5, entity.getUrl());
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(6, size);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoResolutionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long videoInfoId = entity.getVideoInfoId();
        if (videoInfoId != null) {
            stmt.bindLong(2, videoInfoId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
        stmt.bindString(5, entity.getUrl());
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(6, size);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoResolutionInfo readEntity(Cursor cursor, int offset) {
        VideoResolutionInfo entity = new VideoResolutionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // videoInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.getString(offset + 4), // url
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // size
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoResolutionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoInfoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoResolutionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoResolutionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoResolutionInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "playInfos" to-many relationship of VideoInfo. */
    public List<VideoResolutionInfo> _queryVideoInfo_PlayInfos(Long videoInfoId) {
        synchronized (this) {
            if (videoInfo_PlayInfosQuery == null) {
                QueryBuilder<VideoResolutionInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.VideoInfoId.eq(null));
                videoInfo_PlayInfosQuery = queryBuilder.build();
            }
        }
        Query<VideoResolutionInfo> query = videoInfo_PlayInfosQuery.forCurrentThread();
        query.setParameter(0, videoInfoId);
        return query.list();
    }

}
