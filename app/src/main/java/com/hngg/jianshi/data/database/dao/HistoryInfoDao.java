package com.hngg.jianshi.data.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hngg.jianshi.data.database.bean.HistoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_INFO".
*/
public class HistoryInfoDao extends AbstractDao<HistoryInfo, Long> {

    public static final String TABLENAME = "HISTORY_INFO";

    /**
     * Properties of entity HistoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoId = new Property(1, Long.class, "videoId", false, "VIDEO_ID");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Poster = new Property(3, String.class, "poster", false, "POSTER");
        public final static Property VideoName = new Property(4, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property VideoTime = new Property(6, Long.class, "videoTime", false, "VIDEO_TIME");
        public final static Property VideoDesc = new Property(7, String.class, "videoDesc", false, "VIDEO_DESC");
        public final static Property AuthorId = new Property(8, int.class, "authorId", false, "AUTHOR_ID");
        public final static Property AuthorName = new Property(9, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property AuthorIcon = new Property(10, String.class, "authorIcon", false, "AUTHOR_ICON");
        public final static Property AuthorDesc = new Property(11, String.class, "authorDesc", false, "AUTHOR_DESC");
    }


    public HistoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VIDEO_ID\" INTEGER," + // 1: videoId
                "\"URL\" TEXT," + // 2: url
                "\"POSTER\" TEXT," + // 3: poster
                "\"VIDEO_NAME\" TEXT," + // 4: videoName
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"VIDEO_TIME\" INTEGER," + // 6: videoTime
                "\"VIDEO_DESC\" TEXT," + // 7: videoDesc
                "\"AUTHOR_ID\" INTEGER NOT NULL ," + // 8: authorId
                "\"AUTHOR_NAME\" TEXT," + // 9: authorName
                "\"AUTHOR_ICON\" TEXT," + // 10: authorIcon
                "\"AUTHOR_DESC\" TEXT);"); // 11: authorDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(2, videoId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String poster = entity.getPoster();
        if (poster != null) {
            stmt.bindString(4, poster);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(5, videoName);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long videoTime = entity.getVideoTime();
        if (videoTime != null) {
            stmt.bindLong(7, videoTime);
        }
 
        String videoDesc = entity.getVideoDesc();
        if (videoDesc != null) {
            stmt.bindString(8, videoDesc);
        }
        stmt.bindLong(9, entity.getAuthorId());
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(10, authorName);
        }
 
        String authorIcon = entity.getAuthorIcon();
        if (authorIcon != null) {
            stmt.bindString(11, authorIcon);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(12, authorDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindLong(2, videoId);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String poster = entity.getPoster();
        if (poster != null) {
            stmt.bindString(4, poster);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(5, videoName);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long videoTime = entity.getVideoTime();
        if (videoTime != null) {
            stmt.bindLong(7, videoTime);
        }
 
        String videoDesc = entity.getVideoDesc();
        if (videoDesc != null) {
            stmt.bindString(8, videoDesc);
        }
        stmt.bindLong(9, entity.getAuthorId());
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(10, authorName);
        }
 
        String authorIcon = entity.getAuthorIcon();
        if (authorIcon != null) {
            stmt.bindString(11, authorIcon);
        }
 
        String authorDesc = entity.getAuthorDesc();
        if (authorDesc != null) {
            stmt.bindString(12, authorDesc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryInfo readEntity(Cursor cursor, int offset) {
        HistoryInfo entity = new HistoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // videoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // poster
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoName
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // videoTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // videoDesc
            cursor.getInt(offset + 8), // authorId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // authorName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // authorIcon
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // authorDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoster(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setVideoTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setVideoDesc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAuthorId(cursor.getInt(offset + 8));
        entity.setAuthorName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthorIcon(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAuthorDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
